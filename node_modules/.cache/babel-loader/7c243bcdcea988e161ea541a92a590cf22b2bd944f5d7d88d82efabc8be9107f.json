{"ast":null,"code":"import { assertNotStrictEqual } from './typings/common-types.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { applyMiddleware, commandMiddlewareFactory } from './middleware.js';\nimport { parseCommand } from './parse-command.js';\nimport { isYargsInstance } from './yargs-factory.js';\nimport whichModule from './utils/which-module.js';\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/;\nexport function command(yargs, usage, validation) {\n  let globalMiddleware = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let shim = arguments.length > 4 ? arguments[4] : undefined;\n  const self = {};\n  let handlers = {};\n  let aliasMap = {};\n  let defaultCommand;\n  self.addHandler = function addHandler(cmd, description, builder, handler, commandMiddleware, deprecated) {\n    let aliases = [];\n    const middlewares = commandMiddlewareFactory(commandMiddleware);\n    handler = handler || (() => {});\n    if (Array.isArray(cmd)) {\n      if (isCommandAndAliases(cmd)) {\n        [cmd, ...aliases] = cmd;\n      } else {\n        for (const command of cmd) {\n          self.addHandler(command);\n        }\n      }\n    } else if (isCommandHandlerDefinition(cmd)) {\n      let command = Array.isArray(cmd.command) || typeof cmd.command === 'string' ? cmd.command : moduleName(cmd);\n      if (cmd.aliases) command = [].concat(command).concat(cmd.aliases);\n      self.addHandler(command, extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares, cmd.deprecated);\n      return;\n    } else if (isCommandBuilderDefinition(builder)) {\n      self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares, builder.deprecated);\n      return;\n    }\n    if (typeof cmd === 'string') {\n      const parsedCommand = parseCommand(cmd);\n      aliases = aliases.map(alias => parseCommand(alias).cmd);\n      let isDefault = false;\n      const parsedAliases = [parsedCommand.cmd].concat(aliases).filter(c => {\n        if (DEFAULT_MARKER.test(c)) {\n          isDefault = true;\n          return false;\n        }\n        return true;\n      });\n      if (parsedAliases.length === 0 && isDefault) parsedAliases.push('$0');\n      if (isDefault) {\n        parsedCommand.cmd = parsedAliases[0];\n        aliases = parsedAliases.slice(1);\n        cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);\n      }\n      aliases.forEach(alias => {\n        aliasMap[alias] = parsedCommand.cmd;\n      });\n      if (description !== false) {\n        usage.command(cmd, description, isDefault, aliases, deprecated);\n      }\n      handlers[parsedCommand.cmd] = {\n        original: cmd,\n        description,\n        handler,\n        builder: builder || {},\n        middlewares,\n        deprecated,\n        demanded: parsedCommand.demanded,\n        optional: parsedCommand.optional\n      };\n      if (isDefault) defaultCommand = handlers[parsedCommand.cmd];\n    }\n  };\n  self.addDirectory = function addDirectory(dir, context, req, callerFile, opts) {\n    opts = opts || {};\n    if (typeof opts.recurse !== 'boolean') opts.recurse = false;\n    if (!Array.isArray(opts.extensions)) opts.extensions = ['js'];\n    const parentVisit = typeof opts.visit === 'function' ? opts.visit : o => o;\n    opts.visit = function visit(obj, joined, filename) {\n      const visited = parentVisit(obj, joined, filename);\n      if (visited) {\n        if (~context.files.indexOf(joined)) return visited;\n        context.files.push(joined);\n        self.addHandler(visited);\n      }\n      return visited;\n    };\n    shim.requireDirectory({\n      require: req,\n      filename: callerFile\n    }, dir, opts);\n  };\n  function moduleName(obj) {\n    const mod = whichModule(obj);\n    if (!mod) throw new Error(`No command name given for module: ${shim.inspect(obj)}`);\n    return commandFromFilename(mod.filename);\n  }\n  function commandFromFilename(filename) {\n    return shim.path.basename(filename, shim.path.extname(filename));\n  }\n  function extractDesc(_ref) {\n    let {\n      describe,\n      description,\n      desc\n    } = _ref;\n    for (const test of [describe, description, desc]) {\n      if (typeof test === 'string' || test === false) return test;\n      assertNotStrictEqual(test, true, shim);\n    }\n    return false;\n  }\n  self.getCommands = () => Object.keys(handlers).concat(Object.keys(aliasMap));\n  self.getCommandHandlers = () => handlers;\n  self.hasDefaultCommand = () => !!defaultCommand;\n  self.runCommand = function runCommand(command, yargs, parsed, commandIndex) {\n    let aliases = parsed.aliases;\n    const commandHandler = handlers[command] || handlers[aliasMap[command]] || defaultCommand;\n    const currentContext = yargs.getContext();\n    let numFiles = currentContext.files.length;\n    const parentCommands = currentContext.commands.slice();\n    let innerArgv = parsed.argv;\n    let positionalMap = {};\n    if (command) {\n      currentContext.commands.push(command);\n      currentContext.fullCommands.push(commandHandler.original);\n    }\n    const builder = commandHandler.builder;\n    if (isCommandBuilderCallback(builder)) {\n      const builderOutput = builder(yargs.reset(parsed.aliases));\n      const innerYargs = isYargsInstance(builderOutput) ? builderOutput : yargs;\n      if (shouldUpdateUsage(innerYargs)) {\n        innerYargs.getUsageInstance().usage(usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n      }\n      innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);\n      aliases = innerYargs.parsed.aliases;\n    } else if (isCommandBuilderOptionDefinitions(builder)) {\n      const innerYargs = yargs.reset(parsed.aliases);\n      if (shouldUpdateUsage(innerYargs)) {\n        innerYargs.getUsageInstance().usage(usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n      }\n      Object.keys(commandHandler.builder).forEach(key => {\n        innerYargs.option(key, builder[key]);\n      });\n      innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);\n      aliases = innerYargs.parsed.aliases;\n    }\n    if (!yargs._hasOutput()) {\n      positionalMap = populatePositionals(commandHandler, innerArgv, currentContext);\n    }\n    const middlewares = globalMiddleware.slice(0).concat(commandHandler.middlewares);\n    applyMiddleware(innerArgv, yargs, middlewares, true);\n    if (!yargs._hasOutput()) {\n      yargs._runValidation(innerArgv, aliases, positionalMap, yargs.parsed.error, !command);\n    }\n    if (commandHandler.handler && !yargs._hasOutput()) {\n      yargs._setHasOutput();\n      const populateDoubleDash = !!yargs.getOptions().configuration['populate--'];\n      yargs._postProcess(innerArgv, populateDoubleDash);\n      innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false);\n      let handlerResult;\n      if (isPromise(innerArgv)) {\n        handlerResult = innerArgv.then(argv => commandHandler.handler(argv));\n      } else {\n        handlerResult = commandHandler.handler(innerArgv);\n      }\n      const handlerFinishCommand = yargs.getHandlerFinishCommand();\n      if (isPromise(handlerResult)) {\n        yargs.getUsageInstance().cacheHelpMessage();\n        handlerResult.then(value => {\n          if (handlerFinishCommand) {\n            handlerFinishCommand(value);\n          }\n        }).catch(error => {\n          try {\n            yargs.getUsageInstance().fail(null, error);\n          } catch (err) {}\n        }).then(() => {\n          yargs.getUsageInstance().clearCachedHelpMessage();\n        });\n      } else {\n        if (handlerFinishCommand) {\n          handlerFinishCommand(handlerResult);\n        }\n      }\n    }\n    if (command) {\n      currentContext.commands.pop();\n      currentContext.fullCommands.pop();\n    }\n    numFiles = currentContext.files.length - numFiles;\n    if (numFiles > 0) currentContext.files.splice(numFiles * -1, numFiles);\n    return innerArgv;\n  };\n  function shouldUpdateUsage(yargs) {\n    return !yargs.getUsageInstance().getUsageDisabled() && yargs.getUsageInstance().getUsage().length === 0;\n  }\n  function usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {\n    const c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, '').trim() : commandHandler.original;\n    const pc = parentCommands.filter(c => {\n      return !DEFAULT_MARKER.test(c);\n    });\n    pc.push(c);\n    return `$0 ${pc.join(' ')}`;\n  }\n  self.runDefaultBuilderOn = function (yargs) {\n    assertNotStrictEqual(defaultCommand, undefined, shim);\n    if (shouldUpdateUsage(yargs)) {\n      const commandString = DEFAULT_MARKER.test(defaultCommand.original) ? defaultCommand.original : defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ');\n      yargs.getUsageInstance().usage(commandString, defaultCommand.description);\n    }\n    const builder = defaultCommand.builder;\n    if (isCommandBuilderCallback(builder)) {\n      builder(yargs);\n    } else if (!isCommandBuilderDefinition(builder)) {\n      Object.keys(builder).forEach(key => {\n        yargs.option(key, builder[key]);\n      });\n    }\n  };\n  function populatePositionals(commandHandler, argv, context) {\n    argv._ = argv._.slice(context.commands.length);\n    const demanded = commandHandler.demanded.slice(0);\n    const optional = commandHandler.optional.slice(0);\n    const positionalMap = {};\n    validation.positionalCount(demanded.length, argv._.length);\n    while (demanded.length) {\n      const demand = demanded.shift();\n      populatePositional(demand, argv, positionalMap);\n    }\n    while (optional.length) {\n      const maybe = optional.shift();\n      populatePositional(maybe, argv, positionalMap);\n    }\n    argv._ = context.commands.concat(argv._.map(a => '' + a));\n    postProcessPositionals(argv, positionalMap, self.cmdToParseOptions(commandHandler.original));\n    return positionalMap;\n  }\n  function populatePositional(positional, argv, positionalMap) {\n    const cmd = positional.cmd[0];\n    if (positional.variadic) {\n      positionalMap[cmd] = argv._.splice(0).map(String);\n    } else {\n      if (argv._.length) positionalMap[cmd] = [String(argv._.shift())];\n    }\n  }\n  function postProcessPositionals(argv, positionalMap, parseOptions) {\n    const options = Object.assign({}, yargs.getOptions());\n    options.default = Object.assign(parseOptions.default, options.default);\n    for (const key of Object.keys(parseOptions.alias)) {\n      options.alias[key] = (options.alias[key] || []).concat(parseOptions.alias[key]);\n    }\n    options.array = options.array.concat(parseOptions.array);\n    options.config = {};\n    const unparsed = [];\n    Object.keys(positionalMap).forEach(key => {\n      positionalMap[key].map(value => {\n        if (options.configuration['unknown-options-as-args']) options.key[key] = true;\n        unparsed.push(`--${key}`);\n        unparsed.push(value);\n      });\n    });\n    if (!unparsed.length) return;\n    const config = Object.assign({}, options.configuration, {\n      'populate--': true\n    });\n    const parsed = shim.Parser.detailed(unparsed, Object.assign({}, options, {\n      configuration: config\n    }));\n    if (parsed.error) {\n      yargs.getUsageInstance().fail(parsed.error.message, parsed.error);\n    } else {\n      const positionalKeys = Object.keys(positionalMap);\n      Object.keys(positionalMap).forEach(key => {\n        positionalKeys.push(...parsed.aliases[key]);\n      });\n      Object.keys(parsed.argv).forEach(key => {\n        if (positionalKeys.indexOf(key) !== -1) {\n          if (!positionalMap[key]) positionalMap[key] = parsed.argv[key];\n          argv[key] = parsed.argv[key];\n        }\n      });\n    }\n  }\n  self.cmdToParseOptions = function (cmdString) {\n    const parseOptions = {\n      array: [],\n      default: {},\n      alias: {},\n      demand: {}\n    };\n    const parsed = parseCommand(cmdString);\n    parsed.demanded.forEach(d => {\n      const [cmd, ...aliases] = d.cmd;\n      if (d.variadic) {\n        parseOptions.array.push(cmd);\n        parseOptions.default[cmd] = [];\n      }\n      parseOptions.alias[cmd] = aliases;\n      parseOptions.demand[cmd] = true;\n    });\n    parsed.optional.forEach(o => {\n      const [cmd, ...aliases] = o.cmd;\n      if (o.variadic) {\n        parseOptions.array.push(cmd);\n        parseOptions.default[cmd] = [];\n      }\n      parseOptions.alias[cmd] = aliases;\n    });\n    return parseOptions;\n  };\n  self.reset = () => {\n    handlers = {};\n    aliasMap = {};\n    defaultCommand = undefined;\n    return self;\n  };\n  const frozens = [];\n  self.freeze = () => {\n    frozens.push({\n      handlers,\n      aliasMap,\n      defaultCommand\n    });\n  };\n  self.unfreeze = () => {\n    const frozen = frozens.pop();\n    assertNotStrictEqual(frozen, undefined, shim);\n    ({\n      handlers,\n      aliasMap,\n      defaultCommand\n    } = frozen);\n  };\n  return self;\n}\nexport function isCommandBuilderDefinition(builder) {\n  return typeof builder === 'object' && !!builder.builder && typeof builder.handler === 'function';\n}\nfunction isCommandAndAliases(cmd) {\n  if (cmd.every(c => typeof c === 'string')) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function isCommandBuilderCallback(builder) {\n  return typeof builder === 'function';\n}\nfunction isCommandBuilderOptionDefinitions(builder) {\n  return typeof builder === 'object';\n}\nexport function isCommandHandlerDefinition(cmd) {\n  return typeof cmd === 'object' && !Array.isArray(cmd);\n}","map":{"version":3,"names":["assertNotStrictEqual","isPromise","applyMiddleware","commandMiddlewareFactory","parseCommand","isYargsInstance","whichModule","DEFAULT_MARKER","command","yargs","usage","validation","globalMiddleware","arguments","length","undefined","shim","self","handlers","aliasMap","defaultCommand","addHandler","cmd","description","builder","handler","commandMiddleware","deprecated","aliases","middlewares","Array","isArray","isCommandAndAliases","isCommandHandlerDefinition","moduleName","concat","extractDesc","isCommandBuilderDefinition","parsedCommand","map","alias","isDefault","parsedAliases","filter","c","test","push","slice","replace","forEach","original","demanded","optional","addDirectory","dir","context","req","callerFile","opts","recurse","extensions","parentVisit","visit","o","obj","joined","filename","visited","files","indexOf","requireDirectory","require","mod","Error","inspect","commandFromFilename","path","basename","extname","_ref","describe","desc","getCommands","Object","keys","getCommandHandlers","hasDefaultCommand","runCommand","parsed","commandIndex","commandHandler","currentContext","getContext","numFiles","parentCommands","commands","innerArgv","argv","positionalMap","fullCommands","isCommandBuilderCallback","builderOutput","reset","innerYargs","shouldUpdateUsage","getUsageInstance","usageFromParentCommandsCommandHandler","_parseArgs","isCommandBuilderOptionDefinitions","key","option","_hasOutput","populatePositionals","_runValidation","error","_setHasOutput","populateDoubleDash","getOptions","configuration","_postProcess","handlerResult","then","handlerFinishCommand","getHandlerFinishCommand","cacheHelpMessage","value","catch","fail","err","clearCachedHelpMessage","pop","splice","getUsageDisabled","getUsage","trim","pc","join","runDefaultBuilderOn","commandString","_","positionalCount","demand","shift","populatePositional","maybe","a","postProcessPositionals","cmdToParseOptions","positional","variadic","String","parseOptions","options","assign","default","array","config","unparsed","Parser","detailed","message","positionalKeys","cmdString","d","frozens","freeze","unfreeze","frozen","every"],"sources":["/Users/lucasfrotabarroso/Desktop/util/react-algoritmo/node_modules/yargs/build/lib/command.js"],"sourcesContent":["import { assertNotStrictEqual, } from './typings/common-types.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { applyMiddleware, commandMiddlewareFactory, } from './middleware.js';\nimport { parseCommand } from './parse-command.js';\nimport { isYargsInstance, } from './yargs-factory.js';\nimport whichModule from './utils/which-module.js';\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/;\nexport function command(yargs, usage, validation, globalMiddleware = [], shim) {\n    const self = {};\n    let handlers = {};\n    let aliasMap = {};\n    let defaultCommand;\n    self.addHandler = function addHandler(cmd, description, builder, handler, commandMiddleware, deprecated) {\n        let aliases = [];\n        const middlewares = commandMiddlewareFactory(commandMiddleware);\n        handler = handler || (() => { });\n        if (Array.isArray(cmd)) {\n            if (isCommandAndAliases(cmd)) {\n                [cmd, ...aliases] = cmd;\n            }\n            else {\n                for (const command of cmd) {\n                    self.addHandler(command);\n                }\n            }\n        }\n        else if (isCommandHandlerDefinition(cmd)) {\n            let command = Array.isArray(cmd.command) || typeof cmd.command === 'string'\n                ? cmd.command\n                : moduleName(cmd);\n            if (cmd.aliases)\n                command = [].concat(command).concat(cmd.aliases);\n            self.addHandler(command, extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares, cmd.deprecated);\n            return;\n        }\n        else if (isCommandBuilderDefinition(builder)) {\n            self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares, builder.deprecated);\n            return;\n        }\n        if (typeof cmd === 'string') {\n            const parsedCommand = parseCommand(cmd);\n            aliases = aliases.map(alias => parseCommand(alias).cmd);\n            let isDefault = false;\n            const parsedAliases = [parsedCommand.cmd].concat(aliases).filter(c => {\n                if (DEFAULT_MARKER.test(c)) {\n                    isDefault = true;\n                    return false;\n                }\n                return true;\n            });\n            if (parsedAliases.length === 0 && isDefault)\n                parsedAliases.push('$0');\n            if (isDefault) {\n                parsedCommand.cmd = parsedAliases[0];\n                aliases = parsedAliases.slice(1);\n                cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);\n            }\n            aliases.forEach(alias => {\n                aliasMap[alias] = parsedCommand.cmd;\n            });\n            if (description !== false) {\n                usage.command(cmd, description, isDefault, aliases, deprecated);\n            }\n            handlers[parsedCommand.cmd] = {\n                original: cmd,\n                description,\n                handler,\n                builder: builder || {},\n                middlewares,\n                deprecated,\n                demanded: parsedCommand.demanded,\n                optional: parsedCommand.optional,\n            };\n            if (isDefault)\n                defaultCommand = handlers[parsedCommand.cmd];\n        }\n    };\n    self.addDirectory = function addDirectory(dir, context, req, callerFile, opts) {\n        opts = opts || {};\n        if (typeof opts.recurse !== 'boolean')\n            opts.recurse = false;\n        if (!Array.isArray(opts.extensions))\n            opts.extensions = ['js'];\n        const parentVisit = typeof opts.visit === 'function' ? opts.visit : (o) => o;\n        opts.visit = function visit(obj, joined, filename) {\n            const visited = parentVisit(obj, joined, filename);\n            if (visited) {\n                if (~context.files.indexOf(joined))\n                    return visited;\n                context.files.push(joined);\n                self.addHandler(visited);\n            }\n            return visited;\n        };\n        shim.requireDirectory({ require: req, filename: callerFile }, dir, opts);\n    };\n    function moduleName(obj) {\n        const mod = whichModule(obj);\n        if (!mod)\n            throw new Error(`No command name given for module: ${shim.inspect(obj)}`);\n        return commandFromFilename(mod.filename);\n    }\n    function commandFromFilename(filename) {\n        return shim.path.basename(filename, shim.path.extname(filename));\n    }\n    function extractDesc({ describe, description, desc, }) {\n        for (const test of [describe, description, desc]) {\n            if (typeof test === 'string' || test === false)\n                return test;\n            assertNotStrictEqual(test, true, shim);\n        }\n        return false;\n    }\n    self.getCommands = () => Object.keys(handlers).concat(Object.keys(aliasMap));\n    self.getCommandHandlers = () => handlers;\n    self.hasDefaultCommand = () => !!defaultCommand;\n    self.runCommand = function runCommand(command, yargs, parsed, commandIndex) {\n        let aliases = parsed.aliases;\n        const commandHandler = handlers[command] || handlers[aliasMap[command]] || defaultCommand;\n        const currentContext = yargs.getContext();\n        let numFiles = currentContext.files.length;\n        const parentCommands = currentContext.commands.slice();\n        let innerArgv = parsed.argv;\n        let positionalMap = {};\n        if (command) {\n            currentContext.commands.push(command);\n            currentContext.fullCommands.push(commandHandler.original);\n        }\n        const builder = commandHandler.builder;\n        if (isCommandBuilderCallback(builder)) {\n            const builderOutput = builder(yargs.reset(parsed.aliases));\n            const innerYargs = isYargsInstance(builderOutput) ? builderOutput : yargs;\n            if (shouldUpdateUsage(innerYargs)) {\n                innerYargs\n                    .getUsageInstance()\n                    .usage(usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n            }\n            innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);\n            aliases = innerYargs.parsed.aliases;\n        }\n        else if (isCommandBuilderOptionDefinitions(builder)) {\n            const innerYargs = yargs.reset(parsed.aliases);\n            if (shouldUpdateUsage(innerYargs)) {\n                innerYargs\n                    .getUsageInstance()\n                    .usage(usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n            }\n            Object.keys(commandHandler.builder).forEach(key => {\n                innerYargs.option(key, builder[key]);\n            });\n            innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);\n            aliases = innerYargs.parsed.aliases;\n        }\n        if (!yargs._hasOutput()) {\n            positionalMap = populatePositionals(commandHandler, innerArgv, currentContext);\n        }\n        const middlewares = globalMiddleware\n            .slice(0)\n            .concat(commandHandler.middlewares);\n        applyMiddleware(innerArgv, yargs, middlewares, true);\n        if (!yargs._hasOutput()) {\n            yargs._runValidation(innerArgv, aliases, positionalMap, yargs.parsed.error, !command);\n        }\n        if (commandHandler.handler && !yargs._hasOutput()) {\n            yargs._setHasOutput();\n            const populateDoubleDash = !!yargs.getOptions().configuration['populate--'];\n            yargs._postProcess(innerArgv, populateDoubleDash);\n            innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false);\n            let handlerResult;\n            if (isPromise(innerArgv)) {\n                handlerResult = innerArgv.then(argv => commandHandler.handler(argv));\n            }\n            else {\n                handlerResult = commandHandler.handler(innerArgv);\n            }\n            const handlerFinishCommand = yargs.getHandlerFinishCommand();\n            if (isPromise(handlerResult)) {\n                yargs.getUsageInstance().cacheHelpMessage();\n                handlerResult\n                    .then(value => {\n                    if (handlerFinishCommand) {\n                        handlerFinishCommand(value);\n                    }\n                })\n                    .catch(error => {\n                    try {\n                        yargs.getUsageInstance().fail(null, error);\n                    }\n                    catch (err) {\n                    }\n                })\n                    .then(() => {\n                    yargs.getUsageInstance().clearCachedHelpMessage();\n                });\n            }\n            else {\n                if (handlerFinishCommand) {\n                    handlerFinishCommand(handlerResult);\n                }\n            }\n        }\n        if (command) {\n            currentContext.commands.pop();\n            currentContext.fullCommands.pop();\n        }\n        numFiles = currentContext.files.length - numFiles;\n        if (numFiles > 0)\n            currentContext.files.splice(numFiles * -1, numFiles);\n        return innerArgv;\n    };\n    function shouldUpdateUsage(yargs) {\n        return (!yargs.getUsageInstance().getUsageDisabled() &&\n            yargs.getUsageInstance().getUsage().length === 0);\n    }\n    function usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {\n        const c = DEFAULT_MARKER.test(commandHandler.original)\n            ? commandHandler.original.replace(DEFAULT_MARKER, '').trim()\n            : commandHandler.original;\n        const pc = parentCommands.filter(c => {\n            return !DEFAULT_MARKER.test(c);\n        });\n        pc.push(c);\n        return `$0 ${pc.join(' ')}`;\n    }\n    self.runDefaultBuilderOn = function (yargs) {\n        assertNotStrictEqual(defaultCommand, undefined, shim);\n        if (shouldUpdateUsage(yargs)) {\n            const commandString = DEFAULT_MARKER.test(defaultCommand.original)\n                ? defaultCommand.original\n                : defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ');\n            yargs.getUsageInstance().usage(commandString, defaultCommand.description);\n        }\n        const builder = defaultCommand.builder;\n        if (isCommandBuilderCallback(builder)) {\n            builder(yargs);\n        }\n        else if (!isCommandBuilderDefinition(builder)) {\n            Object.keys(builder).forEach(key => {\n                yargs.option(key, builder[key]);\n            });\n        }\n    };\n    function populatePositionals(commandHandler, argv, context) {\n        argv._ = argv._.slice(context.commands.length);\n        const demanded = commandHandler.demanded.slice(0);\n        const optional = commandHandler.optional.slice(0);\n        const positionalMap = {};\n        validation.positionalCount(demanded.length, argv._.length);\n        while (demanded.length) {\n            const demand = demanded.shift();\n            populatePositional(demand, argv, positionalMap);\n        }\n        while (optional.length) {\n            const maybe = optional.shift();\n            populatePositional(maybe, argv, positionalMap);\n        }\n        argv._ = context.commands.concat(argv._.map(a => '' + a));\n        postProcessPositionals(argv, positionalMap, self.cmdToParseOptions(commandHandler.original));\n        return positionalMap;\n    }\n    function populatePositional(positional, argv, positionalMap) {\n        const cmd = positional.cmd[0];\n        if (positional.variadic) {\n            positionalMap[cmd] = argv._.splice(0).map(String);\n        }\n        else {\n            if (argv._.length)\n                positionalMap[cmd] = [String(argv._.shift())];\n        }\n    }\n    function postProcessPositionals(argv, positionalMap, parseOptions) {\n        const options = Object.assign({}, yargs.getOptions());\n        options.default = Object.assign(parseOptions.default, options.default);\n        for (const key of Object.keys(parseOptions.alias)) {\n            options.alias[key] = (options.alias[key] || []).concat(parseOptions.alias[key]);\n        }\n        options.array = options.array.concat(parseOptions.array);\n        options.config = {};\n        const unparsed = [];\n        Object.keys(positionalMap).forEach(key => {\n            positionalMap[key].map(value => {\n                if (options.configuration['unknown-options-as-args'])\n                    options.key[key] = true;\n                unparsed.push(`--${key}`);\n                unparsed.push(value);\n            });\n        });\n        if (!unparsed.length)\n            return;\n        const config = Object.assign({}, options.configuration, {\n            'populate--': true,\n        });\n        const parsed = shim.Parser.detailed(unparsed, Object.assign({}, options, {\n            configuration: config,\n        }));\n        if (parsed.error) {\n            yargs.getUsageInstance().fail(parsed.error.message, parsed.error);\n        }\n        else {\n            const positionalKeys = Object.keys(positionalMap);\n            Object.keys(positionalMap).forEach(key => {\n                positionalKeys.push(...parsed.aliases[key]);\n            });\n            Object.keys(parsed.argv).forEach(key => {\n                if (positionalKeys.indexOf(key) !== -1) {\n                    if (!positionalMap[key])\n                        positionalMap[key] = parsed.argv[key];\n                    argv[key] = parsed.argv[key];\n                }\n            });\n        }\n    }\n    self.cmdToParseOptions = function (cmdString) {\n        const parseOptions = {\n            array: [],\n            default: {},\n            alias: {},\n            demand: {},\n        };\n        const parsed = parseCommand(cmdString);\n        parsed.demanded.forEach(d => {\n            const [cmd, ...aliases] = d.cmd;\n            if (d.variadic) {\n                parseOptions.array.push(cmd);\n                parseOptions.default[cmd] = [];\n            }\n            parseOptions.alias[cmd] = aliases;\n            parseOptions.demand[cmd] = true;\n        });\n        parsed.optional.forEach(o => {\n            const [cmd, ...aliases] = o.cmd;\n            if (o.variadic) {\n                parseOptions.array.push(cmd);\n                parseOptions.default[cmd] = [];\n            }\n            parseOptions.alias[cmd] = aliases;\n        });\n        return parseOptions;\n    };\n    self.reset = () => {\n        handlers = {};\n        aliasMap = {};\n        defaultCommand = undefined;\n        return self;\n    };\n    const frozens = [];\n    self.freeze = () => {\n        frozens.push({\n            handlers,\n            aliasMap,\n            defaultCommand,\n        });\n    };\n    self.unfreeze = () => {\n        const frozen = frozens.pop();\n        assertNotStrictEqual(frozen, undefined, shim);\n        ({ handlers, aliasMap, defaultCommand } = frozen);\n    };\n    return self;\n}\nexport function isCommandBuilderDefinition(builder) {\n    return (typeof builder === 'object' &&\n        !!builder.builder &&\n        typeof builder.handler === 'function');\n}\nfunction isCommandAndAliases(cmd) {\n    if (cmd.every(c => typeof c === 'string')) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function isCommandBuilderCallback(builder) {\n    return typeof builder === 'function';\n}\nfunction isCommandBuilderOptionDefinitions(builder) {\n    return typeof builder === 'object';\n}\nexport function isCommandHandlerDefinition(cmd) {\n    return typeof cmd === 'object' && !Array.isArray(cmd);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}