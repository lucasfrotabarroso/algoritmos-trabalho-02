{"ast":null,"code":"export function parseCommand(cmd) {\n  const extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ');\n  const splitCommand = extraSpacesStrippedCommand.split(/\\s+(?![^[]*]|[^<]*>)/);\n  const bregex = /\\.*[\\][<>]/g;\n  const firstCommand = splitCommand.shift();\n  if (!firstCommand) throw new Error(`No command found in: ${cmd}`);\n  const parsedCommand = {\n    cmd: firstCommand.replace(bregex, ''),\n    demanded: [],\n    optional: []\n  };\n  splitCommand.forEach((cmd, i) => {\n    let variadic = false;\n    cmd = cmd.replace(/\\s/g, '');\n    if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1) variadic = true;\n    if (/^\\[/.test(cmd)) {\n      parsedCommand.optional.push({\n        cmd: cmd.replace(bregex, '').split('|'),\n        variadic\n      });\n    } else {\n      parsedCommand.demanded.push({\n        cmd: cmd.replace(bregex, '').split('|'),\n        variadic\n      });\n    }\n  });\n  return parsedCommand;\n}","map":{"version":3,"names":["parseCommand","cmd","extraSpacesStrippedCommand","replace","splitCommand","split","bregex","firstCommand","shift","Error","parsedCommand","demanded","optional","forEach","i","variadic","test","length","push"],"sources":["/Users/lucasfrotabarroso/Desktop/util/react-algoritmo/node_modules/yargs/build/lib/parse-command.js"],"sourcesContent":["export function parseCommand(cmd) {\n    const extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ');\n    const splitCommand = extraSpacesStrippedCommand.split(/\\s+(?![^[]*]|[^<]*>)/);\n    const bregex = /\\.*[\\][<>]/g;\n    const firstCommand = splitCommand.shift();\n    if (!firstCommand)\n        throw new Error(`No command found in: ${cmd}`);\n    const parsedCommand = {\n        cmd: firstCommand.replace(bregex, ''),\n        demanded: [],\n        optional: [],\n    };\n    splitCommand.forEach((cmd, i) => {\n        let variadic = false;\n        cmd = cmd.replace(/\\s/g, '');\n        if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1)\n            variadic = true;\n        if (/^\\[/.test(cmd)) {\n            parsedCommand.optional.push({\n                cmd: cmd.replace(bregex, '').split('|'),\n                variadic,\n            });\n        }\n        else {\n            parsedCommand.demanded.push({\n                cmd: cmd.replace(bregex, '').split('|'),\n                variadic,\n            });\n        }\n    });\n    return parsedCommand;\n}\n"],"mappings":"AAAA,OAAO,SAASA,YAAYA,CAACC,GAAG,EAAE;EAC9B,MAAMC,0BAA0B,GAAGD,GAAG,CAACE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;EAC9D,MAAMC,YAAY,GAAGF,0BAA0B,CAACG,KAAK,CAAC,sBAAsB,CAAC;EAC7E,MAAMC,MAAM,GAAG,aAAa;EAC5B,MAAMC,YAAY,GAAGH,YAAY,CAACI,KAAK,EAAE;EACzC,IAAI,CAACD,YAAY,EACb,MAAM,IAAIE,KAAK,CAAE,wBAAuBR,GAAI,EAAC,CAAC;EAClD,MAAMS,aAAa,GAAG;IAClBT,GAAG,EAAEM,YAAY,CAACJ,OAAO,CAACG,MAAM,EAAE,EAAE,CAAC;IACrCK,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE;EACd,CAAC;EACDR,YAAY,CAACS,OAAO,CAAC,CAACZ,GAAG,EAAEa,CAAC,KAAK;IAC7B,IAAIC,QAAQ,GAAG,KAAK;IACpBd,GAAG,GAAGA,GAAG,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC5B,IAAI,UAAU,CAACa,IAAI,CAACf,GAAG,CAAC,IAAIa,CAAC,KAAKV,YAAY,CAACa,MAAM,GAAG,CAAC,EACrDF,QAAQ,GAAG,IAAI;IACnB,IAAI,KAAK,CAACC,IAAI,CAACf,GAAG,CAAC,EAAE;MACjBS,aAAa,CAACE,QAAQ,CAACM,IAAI,CAAC;QACxBjB,GAAG,EAAEA,GAAG,CAACE,OAAO,CAACG,MAAM,EAAE,EAAE,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC;QACvCU;MACJ,CAAC,CAAC;IACN,CAAC,MACI;MACDL,aAAa,CAACC,QAAQ,CAACO,IAAI,CAAC;QACxBjB,GAAG,EAAEA,GAAG,CAACE,OAAO,CAACG,MAAM,EAAE,EAAE,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC;QACvCU;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;EACF,OAAOL,aAAa;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}